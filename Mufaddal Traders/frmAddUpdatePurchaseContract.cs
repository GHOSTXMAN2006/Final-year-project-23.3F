using System;
using System.Data;
using System.Data.SqlClient;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Mufaddal_Traders
{
    public partial class frmAddUpdatePurchaseContract : Form
    {
        // DLL imports to allow dragging
        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HT_CAPTION = 0x2;

        [DllImport("User32.dll")]
        public static extern bool ReleaseCapture();

        [DllImport("User32.dll")]
        public static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);

        // Connection string for SQL Server
        private string connectionString = @"Data source=DESKTOP-O0Q3714\SQLEXPRESS ; Initial Catalog=Mufaddal_Traders_db ; Integrated Security=True";

        public frmAddUpdatePurchaseContract()
        {
            InitializeComponent();
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btnMinimize_Click(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Minimized;
        }

        private void picHeader_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                ReleaseCapture();
                SendMessage(this.Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        }

        private void btnBack_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        // Load the combo boxes with supplier and item data when the form loads
        private void frmAddUpdatePurchaseContract_Load(object sender, EventArgs e)
        {
            LoadSupplierData();
            LoadItemData();
            LoadAutoGeneratedContractID();  // Ensure contract ID is auto-generated
        }

        // Function to load Supplier data into the combo box
        // Load Supplier Data
        // Load Supplier Data into ComboBox (Display only SupplierID)
        private void LoadSupplierData()
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                string query = "SELECT SupplierID, Name FROM tblManageSuppliers";
                SqlCommand cmd = new SqlCommand(query, conn);
                conn.Open();
                SqlDataReader reader = cmd.ExecuteReader();

                // Clear ComboBox before adding new items
                txtSupplierID.Items.Clear();

                // Load SupplierIDs into ComboBox
                while (reader.Read())
                {
                    // Add only SupplierID to ComboBox (as plain numbers)
                    txtSupplierID.Items.Add(reader["SupplierID"].ToString());
                }
                conn.Close();
            }
        }

        // Load Item Data into ComboBox (Display only ItemID)
        private void LoadItemData()
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                string query = "SELECT ItemID, Item_Name FROM Items";
                SqlCommand cmd = new SqlCommand(query, conn);
                conn.Open();
                SqlDataReader reader = cmd.ExecuteReader();

                // Clear ComboBox before adding new items
                txtItemID.Items.Clear();

                // Load ItemIDs into ComboBox (as plain numbers)
                while (reader.Read())
                {
                    // Add only ItemID to ComboBox (as plain numbers)
                    txtItemID.Items.Add(reader["ItemID"].ToString());
                }
                conn.Close();
            }
        }

        // When selecting SupplierID, load the corresponding SupplierName
        private void txtSupplierID_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (txtSupplierID.SelectedItem != null)
            {
                string selectedSupplierID = txtSupplierID.SelectedItem.ToString();

                // Look up corresponding Supplier Name based on SupplierID
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    string query = "SELECT Name FROM tblManageSuppliers WHERE SupplierID = @SupplierID";
                    SqlCommand cmd = new SqlCommand(query, conn);
                    cmd.Parameters.AddWithValue("@SupplierID", selectedSupplierID);

                    conn.Open();
                    object result = cmd.ExecuteScalar();  // Get the corresponding name

                    // Display the Supplier Name in the txtSupplierName TextBox
                    if (result != null)
                    {
                        txtSupplierName.Text = result.ToString();
                    }
                    conn.Close();
                }
            }
        }

        // When selecting ItemID, load the corresponding ItemName
        private void txtItemID_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (txtItemID.SelectedItem != null)
            {
                string selectedItemID = txtItemID.SelectedItem.ToString();

                // Look up corresponding Item Name based on ItemID
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    string query = "SELECT Item_Name FROM Items WHERE ItemID = @ItemID";
                    SqlCommand cmd = new SqlCommand(query, conn);
                    cmd.Parameters.AddWithValue("@ItemID", selectedItemID);

                    conn.Open();
                    object result = cmd.ExecuteScalar();  // Get the corresponding name

                    // Display the Item Name in the txtItemName TextBox
                    if (result != null)
                    {
                        txtItemName.Text = result.ToString();
                    }
                    conn.Close();
                }
            }
        }



        // Function to load the next auto-generated Contract ID (if necessary)
        private void LoadAutoGeneratedContractID()
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                string query = "SELECT MAX(PurchaseContractID) FROM Purchase_Contract";
                SqlCommand cmd = new SqlCommand(query, conn);
                conn.Open();
                object result = cmd.ExecuteScalar();
                int newContractID = (result != DBNull.Value) ? Convert.ToInt32(result) + 1 : 1;
                txtContractID.Text = newContractID.ToString();
            }
        }

        // Search functionality - search by PurchaseContractID or Supplier Name
        private void txtSearch_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                string searchText = txtSearch.Text.Trim();
                if (!string.IsNullOrEmpty(searchText))
                {
                    SearchAndLoadContract(searchText);
                }
            }
        }


        // Function to search for a contract by ContractID and load it into the form
        private void SearchAndLoadContract(string searchText)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                string query = @"
            SELECT PurchaseContractID, SupplierID, SupplierName, StartDate, EndDate, ItemID, Item_Name, Description 
            FROM Purchase_Contract
            WHERE PurchaseContractID = @SearchText";

                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@SearchText", searchText);

                try
                {
                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.Read())
                    {
                        // Load data into form fields
                        txtContractID.Text = reader["PurchaseContractID"].ToString();
                        txtSupplierID.SelectedItem = reader["SupplierID"].ToString();
                        txtSupplierName.Text = reader["SupplierName"].ToString();
                        txtStartDate.Text = reader["StartDate"].ToString();
                        txtEndDate.Text = reader["EndDate"].ToString();
                        txtItemID.SelectedItem = reader["ItemID"].ToString();
                        txtItemName.Text = reader["Item_Name"].ToString();
                        txtDescription.Text = reader["Description"].ToString();
                    }
                    else
                    {
                        MessageBox.Show("Contract not found.", "Search Result", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        ClearFields();
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }


        // Save functionality to save contract data
        private void btnSave_Click(object sender, EventArgs e)
        {
            //do not remove this evennt. keep this as it is
        }

        // Update functionality to update contract data
        private void btnUpdate_Click(object sender, EventArgs e)
        {
            if (ValidateInputs() && int.TryParse(txtContractID.Text, out int contractID))
            {
                SqlParameter[] parameters = GetSqlParameters();
                parameters[0] = new SqlParameter("@PurchaseContractID", contractID); // Use PurchaseContractID for the update query
                ExecuteQuery("UPDATE Purchase_Contract SET SupplierID = @SupplierID, SupplierName = @SupplierName, StartDate = @StartDate, " +
                             "EndDate = @EndDate, ItemID = @ItemID, Item_Name = @Item_Name, Description = @Description WHERE PurchaseContractID = @PurchaseContractID", parameters);
            }
            else
            {
                MessageBox.Show("Please ensure all fields are filled and a valid PurchaseContractID is entered.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        // Clear the form
        private void btnClear_Click(object sender, EventArgs e)
        {
            ClearFields();
        }

        // Function to clear all input fields
        private void ClearFields()
        {
            txtContractID.Clear();
            txtSupplierID.SelectedIndex = -1;
            txtSupplierName.Clear();
            txtStartDate.Value = DateTime.Now;
            txtEndDate.Value = DateTime.Now;
            txtItemID.SelectedIndex = -1;
            txtItemName.Clear();
            txtDescription.Clear();
            LoadAutoGeneratedContractID(); // Reload the new PurchaseContractID
        }

        // Function to validate inputs before saving or updating
        private bool ValidateInputs()
        {
            if (txtSupplierID.SelectedIndex == -1)
            {
                MessageBox.Show("Please select a Supplier.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }

            return !(string.IsNullOrWhiteSpace(txtStartDate.Text) || string.IsNullOrWhiteSpace(txtEndDate.Text) ||
                     txtSupplierID.SelectedIndex == -1 || txtItemID.SelectedIndex == -1 || string.IsNullOrWhiteSpace(txtDescription.Text));
        }

        // Function to get SQL parameters from text fields
        private SqlParameter[] GetSqlParameters()
        {
            return new SqlParameter[] {
        new SqlParameter("@SupplierID", txtSupplierID.SelectedItem), // Ensure correct parameter name
        new SqlParameter("@SupplierName", txtSupplierName.Text.Trim()),
        new SqlParameter("@StartDate", txtStartDate.Value),
        new SqlParameter("@EndDate", txtEndDate.Value),
        new SqlParameter("@ItemID", txtItemID.SelectedItem), // Changed from SelectedValue to SelectedItem
        new SqlParameter("@Item_Name", txtItemName.Text.Trim()),
        new SqlParameter("@Description", txtDescription.Text.Trim())
    };
        }


        // do not remove ti=his event.. keep this as it is
        private void txtSearch_TextChanged(object sender, EventArgs e)
        {
            // do not remove ti=his event.. keep this as it is
        }

        // do not remove ti=his event.. keep this as it is
        private void btnSave_Click_1(object sender, EventArgs e)
        {
            if (ValidateInputs())
            {
                SqlParameter[] parameters = GetSqlParameters();
                ExecuteQuery("INSERT INTO Purchase_Contract (SupplierID, SupplierName, StartDate, EndDate, ItemID, Item_Name, Description) " +
                             "VALUES (@SupplierID, @SupplierName, @StartDate, @EndDate, @ItemID, @Item_Name, @Description)", parameters);
            }
        }


        // Execute the query (Insert/Update)
        private void ExecuteQuery(string query, SqlParameter[] parameters)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.AddRange(parameters);
                        int result = cmd.ExecuteNonQuery();
                        if (result > 0)
                        {
                            MessageBox.Show("Operation successful!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            ClearFields();
                        }
                        else
                        {
                            MessageBox.Show("Operation failed.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }


    }
}